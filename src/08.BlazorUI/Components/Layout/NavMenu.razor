@using Microsoft.AspNetCore.Components.Authorization
@using MyApp.BlazorUI.Services.Interfaces
@using MyApp.BlazorUI.Services
@using MyApp.BlazorUI.DTOs.Auth
@using Blazored.LocalStorage;
@inject AuthenticationStateProvider AuthStateProvider
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IAuthService AuthService

<MudNavMenu Class="@Css" Style="width: 100%;">
  @if (!_isLoggedIn)
  {
    <MudLink Href="/login" Class="btn">
      <MudButton Variant="Variant.Outlined" Class="rounded-lg button button-outline">
        Login
      </MudButton>
    </MudLink>

    <MudLink Href="/register" Class="btn">
      <MudButton Variant="Variant.Filled" DropShadow="false" Class="rounded-lg button button-filled">
        Register
      </MudButton>
    </MudLink>
  }
  else
  {
    <MudLink Href="/" Class="nav-link">
      <MudButton Class="nav-btn">
        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
        <MudText Class="d-flex d-sm-none nav-text">Cart</MudText>
      </MudButton>
    </MudLink>

    <MudLink Href="/" Class="nav-link">
      <MudButton Class="nav-btn">
        <MudIcon Icon="@Icons.Material.Filled.Home" Class="d-flex d-sm-none" />
        <MudText Class="nav-text">My Class</MudText>
      </MudButton>
    </MudLink>

    <MudLink Href="/" Class="nav-link">
      <MudButton Class="nav-btn">
        <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="d-flex d-sm-none" />
        <MudText Class="nav-text">Invoice</MudText>
      </MudButton>
    </MudLink>

    <MudText Class="d-none d-sm-flex" style="color:#5b4947; font-size:24px">|</MudText>
    <MudDivider Class="d-flex d-sm-none my-1 line" />

    <MudLink Href="/" Class="nav-link">
      <MudButton Class="nav-btn">
        <MudIcon Icon="@Icons.Material.Filled.Person" Style="color:#FABC1D;" />
        <MudText Class="d-flex d-sm-none nav-text">Profile</MudText>
      </MudButton>
    </MudLink>

    <MudLink Href="/" Class="nav-link">
      <MudButton Class="nav-btn" OnClick="Logout">
        <MudIcon Icon="@Icons.Material.Filled.ExitToApp" />
        <MudText Class="d-flex d-sm-none nav-text">Logout</MudText>
      </MudButton>
    </MudLink>
  }
</MudNavMenu>

@code {
  [Parameter] public string Css { get; set; } = "";
  private bool _isLoggedIn;
  private bool _initialized;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    _isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;

    // Listen to changes (e.g., after login/logout)
    if (AuthStateProvider is CustomAuthStateProvider customProvider)
    {
      customProvider.AuthenticationStateChanged += async task =>
      {
        var state = await task;
        _isLoggedIn = state.User.Identity?.IsAuthenticated ?? false;
        await InvokeAsync(StateHasChanged);
      };
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && !_initialized)
    {
      _initialized = true;
      try
      {
        var isAuth = await AuthService.IsUserAuthenticatedAsync();
        if (isAuth && !_isLoggedIn)
        {
          _isLoggedIn = true;
          StateHasChanged();
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine($"NavMenu init auth check failed: {ex.Message}");
      }
    }
  }

  private async Task Logout()
  {
    try
    {
      var result = await AuthService.LogoutAsync();
      if (result == null)
      {
        Console.WriteLine("Logout failed: no response from server.");
        return;
      }

      if (result.Success)
      {
        _isLoggedIn = false;
        Console.WriteLine(result.Message);
        StateHasChanged();
      }
      else
      {
        Console.WriteLine(result.Message);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Logout error: {ex}");
    }
  }
}

<style>
  .btn {
    display: flex;
    justify-content: center;
  }

  .nav-link {
    text-decoration: none !important;
  }

  .nav-btn {
    width: 100%;
    padding: 0.7rem;
    display: flex;
    justify-content: start;
    color: #5b4947;
    border-radius: 0.5rem;
  }

  .nav-text {
    font-size: 16px;
    font-weight: 500;
    margin: 0 1rem;
  }

  .line {
    border: 1px solid black;
  }

  @@media (min-width: 600px) {
    .nav-btn {
      justify-content: center;
    }
  }
</style>