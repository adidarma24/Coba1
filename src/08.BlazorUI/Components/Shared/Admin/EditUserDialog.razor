<MudDialog>
  <TitleContent>
    <MudText Typo="Typo.h6">Edit User</MudText>
  </TitleContent>
  <DialogContent>
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
      <MudPaper Elevation="0" Class="d-flex flex-column gap-6">
        <MudTextField T="string" @bind-Value="User.Name" Placeholder="Name" Variant="Variant.Outlined"
          Required="true" RequiredError="Name is required!" For="@(() => User.Name)" Style="height: 2rem;" />

        <MudTextField T="string" @bind-Value="User.Email"
          Validation="@(new Func<string, string>(ValidateEmail))" Placeholder="Email" Variant="Variant.Outlined"
          InputType="InputType.Email" Required="true" RequiredError="Email is required!"
          For="@(() => User.Email)" Style="height: 2rem;" />

        <MudRadioGroup @bind-Value="User.Role" required RequiredError="Role is required!" For="@(() => User.Role)">
        <MudText>Role: </MudText>
          <MudRadio Value="@UserRole.Admin" Color="Color.Warning">Admin</MudRadio>
          <MudRadio Value="@UserRole.User" Color="Color.Warning">User</MudRadio>
        </MudRadioGroup>
        
        <MudRadioGroup @bind-Value="User.Status" required RequiredError="Status is required!" For="@(() => User.Status)">
        <MudText>Status: </MudText>
          <MudRadio Value="@UserStatus.Active" Color="Color.Success">Active</MudRadio>
          <MudRadio Value="@UserStatus.Inactive" Color="Color.Error">Inactive</MudRadio>
        </MudRadioGroup>

        @if (!string.IsNullOrEmpty(userError))
        {
          <MudText Color="Color.Error">@userError</MudText>
        }

      </MudPaper>
    </MudForm>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel" Variant="Variant.Outlined" DropShadow="false" Class="rounded-lg button button-outline">Cancel</MudButton>
    <MudButton OnClick="Submit" Variant="Variant.Filled" DropShadow="false" Class="rounded-lg button button-filled" Style="color: white;">Submit</MudButton>
  </DialogActions>
</MudDialog>

@code {
  [CascadingParameter]
  private IMudDialogInstance MudDialog { get; set; }
  [Parameter] public UserModel User { get; set; } = default!;

  bool success;
  string[] errors = { };
  MudForm? form;
  private string userError = string.Empty;
  bool isShow;
  InputType PasswordInput = InputType.Password;
  string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

  private static string email = "test@gmail.com";

  private void Cancel() => MudDialog.Cancel();

  private void Submit()
  {
    form?.Validate();
    if (success)
    {
      if (User.Email != email)
      {
        Console.WriteLine("Add User Success!");
        MudDialog.Close(DialogResult.Ok(User));
      }
      else
      {
        userError = "Email already registered!";
      }
    }
  }

  private string ValidateEmail(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      return "Email is required!";
    }
    else if (!System.Text.RegularExpressions.Regex.IsMatch(value,
    @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
    {
      return "Invalid email format!";
    }
    else
    {
      return string.Empty;
    }
  }

  private IEnumerable<string> ValidatePassword(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      yield return "Password is required!";
      yield break;
    }
    if (value.Length < 6 || !Regex.IsMatch(value, @"[A-Z]") || !Regex.IsMatch(value, @"[0-9]"))
    {
      yield return "Password must be at least 6 characters, contain at least one uppercase letter and contain at least one number!";
    }
  }

  void TogglePasword()
  {
    @if (isShow)
    {
      isShow = false;
      PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
      PasswordInput = InputType.Password;
    }
    else {
      isShow = true;
      PasswordInputIcon = Icons.Material.Filled.Visibility;
      PasswordInput = InputType.Text;
    }
  }
}