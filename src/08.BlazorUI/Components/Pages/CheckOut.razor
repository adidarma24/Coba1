@page "/checkout"
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Checkout</PageTitle>

<MudPaper Elevation="0" Class="pt-2" Style="min-height: 100%;">
  <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="py-4 px-10">

    <MudPaper Elevation="0" Class="d-flex align-center">
      <MudCheckBox T="bool" Value="@SelectAll" ValueChanged="OnSelectAllChanged" Label=" Pilih Semua" />
    </MudPaper>

    <MudDivider Style="border-top: 2px solid rgba(0,0,0,0.77);" />

    <MudPaper Elevation="0" Class="pa-4" style="height: calc(100vh - 15rem); overflow: auto;">
      @foreach (var item in CartItems)
      {
        <MudGrid Class="align-center" @key="item">

          <MudItem xs="2" sm="1" md="1">
            <MudCheckBox T="bool" Value="@item.Selected" For="@(() => item.Selected)"
              ValueChanged="@(checkedValue => OnItemSelectionChanged(item, checkedValue))" />
          </MudItem>

          <MudItem xs="12" sm="4" md="2">
            <MudImage Src="@item.ImageUrl" Alt="@item.Name" Fluid="true" Style="width: 12.5rem; height: 8.3rem;" />
          </MudItem>
          <MudItem xs="10" sm="6" md="8">
            <div class="d-flex flex-column">
              <MudText Typo="Typo.caption" style="color: #828282;">@item.Category</MudText>
              <MudText Typo="Typo.h6" style="font-weight: 600;">@item.Name</MudText>
              <MudText Typo="Typo.body2" Color="Color.Default">
                Schedule: @item.Schedule.ToString("dddd, dd MMMM yyyy")
              </MudText>
              <MudText Typo="Typo.subtitle1" style="color: #FABC1D; font-weight: 500;">
                IDR @item.Price.ToString("N2")
              </MudText>
            </div>
          </MudItem>
          <MudItem xs="2" sm="1" md="1" Class="d-flex justify-end align-center">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveItem(item))" />
          </MudItem>
        </MudGrid>
        <MudDivider Class="my-2" Style="border-top: 2px solid rgba(0,0,0,0.77);" />
      }
    </MudPaper>
  </MudForm>

  <MudDivider Class="my-2" Style="border-top: 2px solid rgba(0,0,0,0.77); width: 100%;" />

  <MudPaper Height="4rem" Elevation="0" Class="d-flex justify-between align-center px-10">
    <MudText Typo="Typo.subtitle1" Class="mr-4">Total Price</MudText>
    <MudText Typo="Typo.h6" style="color: #FABC1D;">IDR @_totalPrice.ToString("N2")</MudText>
    <MudSpacer />
    <MudButton Variant="Variant.Filled" Class="button button-filled rounded-lg" OnClick="@OpenPayment">
      Pay Now
    </MudButton>
  </MudPaper>
</MudPaper>

@code {
  MudForm? form;
  bool success;
  string[] errors = { };

  private bool SelectAll;
  private decimal _totalPrice => SelectedItems.Sum(i => i.Price);

  private List<CartItem> CartItems = new()
{
new CartItem { Category="Asian", Name="Tom Yum Thailand", Schedule=new DateTime(2022,7,27), Price=450_000,
ImageUrl="images/image11.svg"},
new CartItem { Category="Asian", Name="Ichiraku Ramen", Schedule=new DateTime(2022,7,24), Price=300_000,
ImageUrl="images/image10.svg"},
new CartItem { Category="Eastern", Name="Italian Spaghetti Bolognese", Schedule=new DateTime(2022,7,25), Price=450_000,
ImageUrl="images/image16.svg"},
}
  ;

  private List<CartItem> SelectedItems = new List<CartItem>();

  private void OnSelectAllChanged(bool value)
  {
    SelectAll = value;

    foreach (var item in CartItems)
    {
      item.Selected = value;

      if (value)
      {
        if (!SelectedItems.Contains(item))
          SelectedItems.Add(item);
      }
      else
      {
        SelectedItems.Clear();
      }
    }

    StateHasChanged();
  }

  private void OnItemSelectionChanged(CartItem item, bool isChecked)
  {
    item.Selected = isChecked;

    if (isChecked)
    {
      if (!SelectedItems.Contains(item))
        SelectedItems.Add(item);
    }
    else
    {
      SelectedItems.Remove(item);
    }

    SelectAll = CartItems.All(i => i.Selected);
    StateHasChanged();
  }

  private void RemoveItem(CartItem item)
  {
    CartItems.Remove(item);
    SelectedItems.Remove(item);
    SelectAll = CartItems.All(i => i.Selected);
    StateHasChanged();
  }

  private async Task OpenPayment()
  {
    if (_totalPrice <= 0) { Snackbar.Add("Tidak ada item yang dipilih untuk dibayar.", Severity.Info); return; }
    var
    options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, }; // Use ShowAsync
    (recommended)and consider a null Data as cancellation var dialogRef = await DialogService.ShowAsync<PaymentMethod>
    ("Select Payment Method", options);
    var result = await dialogRef.Result;

    if (result?.Data != null)
    {
      var method = result.Data.ToString() ?? "(tidak diketahui)";
      Snackbar.Add($"Membayar sebesar IDR {_totalPrice:N0} menggunakan {method}.", Severity.Success);
    }
    else
    {
      Snackbar.Add("Pembayaran dibatalkan.", Severity.Info);
    }
  }

  public class CartItem
  {
    public int MSId { get; set; }
    public string? Category { get; set; }
    public string? Name { get; set; }
    public DateTime Schedule { get; set; }
    public decimal Price { get; set; }
    public string? ImageUrl { get; set; }
    public bool Selected { get; set; }
  }
}

<style>
  body {
    height: 100vh;
  }

  .mud-main-content {
    height: 100%;
  }

  .sticky-footer {
    position: sticky;
    bottom: 100;
    z-index: 100;
  }
</style>