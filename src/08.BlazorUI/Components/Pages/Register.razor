@page "/register"
@using MyApp.BlazorUI.Services.Interfaces
@using MyApp.BlazorUI.DTOs.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<MudContainer Class="d-flex flex-column gap-15 justify-center align-center container">

  <MudPaper Elevation="0" Width="100%" Class="d-flex flex-column gap-10" Style="max-width: 38.5rem;">
    <MudPaper Elevation="0" Class="d-flex flex-column gap-4" Style="color: #5B4947;">
      <MudText Typo="Typo.h5" Style="font-weight: 500;">Are you ready to become a professional chef?</MudText>
      <MudText Typo="Typo.body1" Style="font-weight: 400;">Please register first</MudText>
    </MudPaper>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
      <MudPaper Elevation="0" Class="d-flex flex-column gap-6">
        <MudTextField T="string"
                      @bind-Value="registerRequestDto.Name"
                      Placeholder="Name" 
                      Variant="Variant.Outlined" 
                      Required="true"
                      RequiredError="Name is required!"
                      For="@(() => registerRequestDto.Name)" 
                      Style="height: 2rem;" />

        <MudTextField T="string"
                      @bind-Value="registerRequestDto.Email" 
                      Validation="@(new Func<string, string>(ValidateEmail))"
                      Placeholder="Email" 
                      Variant="Variant.Outlined" 
                      InputType="InputType.Email" 
                      Required="true"
                      RequiredError="Email is required!"
                      For="@(() => registerRequestDto.Email)" 
                      Style="height: 2rem;" />

        <MudTextField T="string"
                      @bind-Value="registerRequestDto.Password" 
                      Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                      Placeholder="Password" 
                      Variant="Variant.Outlined"
                      InputType="@PasswordInput"
                      Adornment="Adornment.End"
                      AdornmentIcon="@PasswordInputIcon"
                      OnAdornmentClick="TogglePasword"
                      AdornmentAriaLabel="Show Password"
                      IconSize="Size.Small"
                      Required="true" 
                      RequiredError="Password is required!"
                      For="@(() => registerRequestDto.Password)" 
                      Style="height: 2rem;" />

        <MudTextField T="string"
                      @bind-Value="registerRequestDto.ConfirmPassword" 
                      Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                      Placeholder="Confirm Password"
                      Variant="Variant.Outlined" 
                      InputType="@PasswordInput"
                      Adornment="Adornment.End"
                      AdornmentIcon="@PasswordInputIcon"
                      OnAdornmentClick="TogglePasword"
                      AdornmentAriaLabel="Show Password"
                      IconSize="Size.Small"
                      Required="true"
                      RequiredError="Please confirm your password!"
                      For="@(() => registerRequestDto.ConfirmPassword)" 
                      Style="height: 2rem;" />
      
        @if (!string.IsNullOrEmpty(registerError))
        {
          <MudText Color="Color.Error">@registerError</MudText>
        }

      </MudPaper>
    </MudForm>

    <MudPaper Elevation="0" Class="d-flex justify-end">
      <MudButton Disabled="@_processing" OnClick="Submit" Variant="Variant.Filled" DropShadow="false" Class="rounded-lg button button-filled">
        @if (_processing)
        {
          <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
          <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
          <MudText>Sign Up</MudText>
        }
      </MudButton>
    </MudPaper>
  </MudPaper>

  <MudText Typo="Typo.body2" Style="font-weight: 400;">
    Have account?
    <MudLink Href="/login">Login here</MudLink>
  </MudText>
</MudContainer>

@code {
  bool success;
  string[] errors = { };
  MudForm? form;
  private bool _processing = false;
  private string registerError = string.Empty;
  private RegisterRequestDto registerRequestDto = new RegisterRequestDto();

  bool isShow;
  InputType PasswordInput = InputType.Password;
  string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

   protected override async Task OnInitializedAsync()
  {
    var authState = await AuthService.IsUserAuthenticatedAsync();
    if (authState)
    {
      Navigation.NavigateTo("/", forceLoad: true);
    }
  }

  private async Task Submit()
  {
    form?.Validate();

    if (!success)
      return;

    _processing = true;
    registerError = string.Empty;
    StateHasChanged();

    try
    {
      var result = await AuthService.RegisterAsync(registerRequestDto);
      if (result.Success)
      {
        Console.WriteLine("Register Success!");
        registerError = result.Message;
      }
      else
      {
        registerError = result.Message;
      }
    }
    catch
    {
      registerError = $"Server error";
    }
    finally
    {
      _processing = false;
      StateHasChanged();
    }
  }

  private string ValidateEmail(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      return "Email is required!";
    }
    else if (!System.Text.RegularExpressions.Regex.IsMatch(value,
    @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
    {
      return "Invalid email format!";
    }
    else
    {
      return string.Empty;
    }
  }

  private IEnumerable<string> ValidatePassword(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      yield return "Password is required!";
      yield break;
    }
    if (value.Length < 6 || !Regex.IsMatch(value, @"[A-Z]") || !Regex.IsMatch(value, @"[0-9]"))
    {
      yield return "Password must be at least 6 characters, contain at least one uppercase letter and contain at least one number!";
    }
    ValidateConfirmPassword(registerRequestDto.ConfirmPassword);
  }

  private string ValidateConfirmPassword(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      return "Please confirm your password!";
    }
    else if (value != registerRequestDto.Password)
    {
      return "Passwords do not match!";
    }
    else
    {
      return string.Empty;
    }
  }

  void TogglePasword()
  {
    @if (isShow)
    {
      isShow = false;
      PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
      PasswordInput = InputType.Password;
    }
    else {
      isShow = true;
      PasswordInputIcon = Icons.Material.Filled.Visibility;
      PasswordInput = InputType.Text;
    }
  }
}