@page "/login"
@using MyApp.BlazorUI.Services.Interfaces
@using MyApp.BlazorUI.DTOs.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<MudContainer Class="d-flex flex-column gap-15 justify-center align-center container">

  <MudPaper Elevation="0" Width="100%" Class="d-flex flex-column gap-10" Style="max-width: 38.5rem;">
    <MudPaper Elevation="0" Class="d-flex flex-column gap-4" Style="color: #5b4947;">
      <MudText Typo="Typo.h5" Style="font-weight: 500;">Welcome Back! Cheff</MudText>
      <MudText Typo="Typo.body1" Style="font-weight: 400;">Please login first</MudText>
    </MudPaper>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
      <MudPaper Elevation="0" Class="d-flex flex-column gap-6">
        <MudTextField T="string" @bind-Value="loginRequestDto.Email"
          Validation="@(new Func<string, string>(ValidateEmail))" Placeholder="Email" Variant="Variant.Outlined"
          InputType="InputType.Email" Required="true" RequiredError="Email is required!"
          For="@(() => loginRequestDto.Email)" Style="height: 2rem;" />

        <MudTextField T="string" @bind-Value="loginRequestDto.Password" Placeholder="Password"
          Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End"
          AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasword" AdornmentAriaLabel="Show Password"
          IconSize="Size.Small" Required="true" RequiredError="Password is required!"
          For="@(() => loginRequestDto.Password)" Style="height: 2rem;" />

        @if (!string.IsNullOrEmpty(loginError))
        {
          <MudText Color="Color.Error">@loginError</MudText>
        }

        @if (loginError == "Your email is not confirmed, please check your email or resend email confirmation.")
        {
          <MudButton Disabled="@_processing" OnClick="SubmitResendEmail" Variant="Variant.Text" Color="Color.Primary">
            @if (_processing)
            {
              <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
              <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
              <MudText>Resend email confirmation</MudText>
            }
          </MudButton>

          <MudText Color="Color.Error">@loginResendError</MudText>
        }

        <MudText Typo="Typo.body2" Style="font-weight: 400; color: #5b4947;">
          Forgot Password?
          <MudLink Href="/reset-password">Click Here</MudLink>
        </MudText>
      </MudPaper>
    </MudForm>

    <MudPaper Elevation="0" Class="d-flex justify-end">
      <MudButton Disabled="@_processing" OnClick="Submit" Variant="Variant.Filled" DropShadow="false"
        Class="rounded-lg button button-filled">
        @if (_processing)
        {
          <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
          <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
          <MudText>Login</MudText>
        }
      </MudButton>
    </MudPaper>
  </MudPaper>

  <MudText Typo="Typo.body2" Style="font-weight: 400; color: #5b4947;">
    Dont have account?
    <MudLink Href="/register">Sign Up here</MudLink>
  </MudText>
</MudContainer>

@code {
  MudForm? form;
  bool success;
  string[] errors = { };
  private bool _processing = false;
  private string loginError = string.Empty;
  private string loginResendError = string.Empty;
  private LoginRequestDto loginRequestDto = new LoginRequestDto();

  bool isShow;
  InputType PasswordInput = InputType.Password;
  string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthService.IsUserAuthenticatedAsync();
    if (authState)
    {
      Navigation.NavigateTo("/", forceLoad: true);
    }
  }


  private async Task Submit()
  {
    form?.Validate();

    if (!success)
      return;

    _processing = true;
    loginError = string.Empty;
    StateHasChanged();

    try
    {
      var result = await AuthService.LoginAsync(loginRequestDto);
      if (result.Success)
      {
        Console.WriteLine("Login Success!");
        loginError = string.Empty;
        Navigation.NavigateTo("/");
      }
      else
      {
        loginError = result.Message;
      }
    }
    catch (Exception ex)
    {
      loginError = $"Server error";
    }
    finally
    {
      _processing = false;
      StateHasChanged();
    }
  }

  private async Task SubmitResendEmail()
  {
    _processing = true;
    loginResendError = string.Empty;
    StateHasChanged();

    try
    {
      var result = await AuthService.ResendConfirmationEmailAsync(loginRequestDto.Email);
      if (result.Success)
      {
        Console.WriteLine("Resend email Success!");
        loginResendError = result.Message;
      }
      else
      {
        loginResendError = result.Message;
      }
    }
    catch (Exception ex)
    {
      loginResendError = $"Server error";
    }
    finally
    {
      _processing = false;
      StateHasChanged();
    }
  }

  private string ValidateEmail(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      return "Email is required!";
    }
    else if (!System.Text.RegularExpressions.Regex.IsMatch(value,
    @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
    {
      return "Invalid email format!";
    }
    else
    {
      return string.Empty;
    }
  }

  void TogglePasword()
  {
    @if (isShow)
    {
      isShow = false;
      PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
      PasswordInput = InputType.Password;
    }
    else
    {
      isShow = true;
      PasswordInputIcon = Icons.Material.Filled.Visibility;
      PasswordInput = InputType.Text;
    }
  }
}