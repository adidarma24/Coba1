@page "/new-password"
@using MyApp.BlazorUI.Services.Interfaces
@using MyApp.BlazorUI.DTOs.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>

<MudContainer Class="d-flex flex-column gap-15 align-center"
  Style="max-height: calc(100vh - 5.375rem); margin: 9rem auto;">

  <MudPaper Elevation="0" Class="d-flex flex-column gap-10" Style="width: 100%; max-width: 38.5rem;">
    <MudPaper Elevation="0" Class="d-flex flex-column gap-4" Style="color: #5B4947;">
      <MudText Typo="Typo.h5" Style="font-weight: 400;">Create Password</MudText>
    </MudPaper>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
      <MudPaper Elevation="0" Class="d-flex flex-column gap-6">
        <MudTextField T="string" 
                      @bind-Value="resetPasswordRequestDto.NewPassword"
                      Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" 
                      Placeholder="New Password"
                      Variant="Variant.Outlined" 
                      InputType="@PasswordInput" 
                      Adornment="Adornment.End" 
                      AdornmentIcon="@PasswordInputIcon" 
                      OnAdornmentClick="TogglePasword" 
                      AdornmentAriaLabel="Show Password" 
                      IconSize="Size.Small" 
                      Required="true" 
                      RequiredError="New password is required!" 
                      For="@(() => resetPasswordRequestDto.NewPassword)"  
                      Style="height: 2rem;" />

        <MudTextField T="string" 
                      @bind-Value="resetPasswordRequestDto.ConfirmNewPassword"
                      Validation="@(new Func<string, string>(ValidateConfirmPassword))" 
                      Placeholder="Confirm New Password"
                      Variant="Variant.Outlined" 
                      InputType="@PasswordInput" 
                      Adornment="Adornment.End" 
                      AdornmentIcon="@PasswordInputIcon" 
                      OnAdornmentClick="TogglePasword" 
                      AdornmentAriaLabel="Show Password" 
                      IconSize="Size.Small" 
                      Required="true"
                      RequiredError="Please confirm your new password!" 
                      For="@(() => resetPasswordRequestDto.ConfirmNewPassword)"
                      Style="height: 2rem;" />

        @if (!string.IsNullOrEmpty(passwordError))
        {
          <MudText Color="Color.Error">@passwordError</MudText>
        }
      </MudPaper>
    </MudForm>

    <MudPaper Elevation="0" Class="d-flex justify-end gap-6">
      <MudLink Href="/login">
        <MudButton Variant="Variant.Outlined" Class="rounded-lg button button-outline">
          Cancel
        </MudButton>
      </MudLink>

      <MudButton Disabled="@_processing" OnClick="Submit" Variant="Variant.Filled" DropShadow="false" Class="rounded-lg button button-filled">
        @if (_processing)
        {
          <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
          <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
          <MudText>Confirm</MudText>
        }
      </MudButton>
    </MudPaper>
  </MudPaper>

</MudContainer>

@code {
  MudForm? form;
  bool success;
  string[] errors = { };
  private bool _processing = false;
  private string passwordError = string.Empty;
  private ResetPasswordRequestDto resetPasswordRequestDto = new ResetPasswordRequestDto();

  protected override void OnInitialized()
  {
    var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

    var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

    if (query.TryGetValue("email", out var emailValue))
        resetPasswordRequestDto.Email = emailValue!;

    if (query.TryGetValue("token", out var tokenValue))
        resetPasswordRequestDto.Token = tokenValue!;
  }

  bool isShow;
  InputType PasswordInput = InputType.Password;
  string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

  private async Task Submit()
  {
    form?.Validate();

    if (!success)
      return;

    _processing = true;
    passwordError = string.Empty;
    StateHasChanged();

    try
    {
      var result = await AuthService.ResetPasswordAsync(resetPasswordRequestDto);
      if(result.Success)
      {
      Console.WriteLine("Password reset Success.");
      passwordError = result.Message;
      Navigation.NavigateTo("/password-reset-success");
      }
      else 
      {
      passwordError = result.Message;
      }
    }
    catch(Exception ex)
    { 
      passwordError = $"server error";
    }
    finally
    {
      _processing = false;
      StateHasChanged();
    }
  }

  private IEnumerable<string> ValidatePassword(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      yield return "New password is required!";
      yield break;
    }
    if (value.Length < 6 || !Regex.IsMatch(value, @"[A-Z]") || !Regex.IsMatch(value, @"[0-9]"))
    {
      yield return "Password must be at least 6 characters, contain at least one uppercase letter and contain at least one number!";
    }
    ValidateConfirmPassword(resetPasswordRequestDto.ConfirmNewPassword);
  }

  private string ValidateConfirmPassword(string value)
  {
    if (string.IsNullOrWhiteSpace(value))
    {
      return "Please confirm your new password!";
    }
    else if (value != resetPasswordRequestDto.NewPassword)
    {
      return "New password do not match!";
    }
    else
    {
      return string.Empty;
    }
  }

  void TogglePasword()
  {
    @if (isShow)
    {
      isShow = false;
      PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
      PasswordInput = InputType.Password;
    }
    else
    {
      isShow = true;
      PasswordInputIcon = Icons.Material.Filled.Visibility;
      PasswordInput = InputType.Text;
    }
  }
}